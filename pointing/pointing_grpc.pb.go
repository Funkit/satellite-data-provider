// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: pointing.proto

package pointing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessingClient is the client API for Processing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessingClient interface {
	// For a given TLE, receiving station and time range, returns the pointing information
	GetAntennaPointing(ctx context.Context, in *AntennaPointingRequest, opts ...grpc.CallOption) (Processing_GetAntennaPointingClient, error)
}

type processingClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessingClient(cc grpc.ClientConnInterface) ProcessingClient {
	return &processingClient{cc}
}

func (c *processingClient) GetAntennaPointing(ctx context.Context, in *AntennaPointingRequest, opts ...grpc.CallOption) (Processing_GetAntennaPointingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Processing_ServiceDesc.Streams[0], "/pointing.Processing/GetAntennaPointing", opts...)
	if err != nil {
		return nil, err
	}
	x := &processingGetAntennaPointingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Processing_GetAntennaPointingClient interface {
	Recv() (*AntennaPointingReply, error)
	grpc.ClientStream
}

type processingGetAntennaPointingClient struct {
	grpc.ClientStream
}

func (x *processingGetAntennaPointingClient) Recv() (*AntennaPointingReply, error) {
	m := new(AntennaPointingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessingServer is the server API for Processing service.
// All implementations must embed UnimplementedProcessingServer
// for forward compatibility
type ProcessingServer interface {
	// For a given TLE, receiving station and time range, returns the pointing information
	GetAntennaPointing(*AntennaPointingRequest, Processing_GetAntennaPointingServer) error
	mustEmbedUnimplementedProcessingServer()
}

// UnimplementedProcessingServer must be embedded to have forward compatible implementations.
type UnimplementedProcessingServer struct {
}

func (UnimplementedProcessingServer) GetAntennaPointing(*AntennaPointingRequest, Processing_GetAntennaPointingServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAntennaPointing not implemented")
}
func (UnimplementedProcessingServer) mustEmbedUnimplementedProcessingServer() {}

// UnsafeProcessingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessingServer will
// result in compilation errors.
type UnsafeProcessingServer interface {
	mustEmbedUnimplementedProcessingServer()
}

func RegisterProcessingServer(s grpc.ServiceRegistrar, srv ProcessingServer) {
	s.RegisterService(&Processing_ServiceDesc, srv)
}

func _Processing_GetAntennaPointing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AntennaPointingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessingServer).GetAntennaPointing(m, &processingGetAntennaPointingServer{stream})
}

type Processing_GetAntennaPointingServer interface {
	Send(*AntennaPointingReply) error
	grpc.ServerStream
}

type processingGetAntennaPointingServer struct {
	grpc.ServerStream
}

func (x *processingGetAntennaPointingServer) Send(m *AntennaPointingReply) error {
	return x.ServerStream.SendMsg(m)
}

// Processing_ServiceDesc is the grpc.ServiceDesc for Processing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Processing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pointing.Processing",
	HandlerType: (*ProcessingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAntennaPointing",
			Handler:       _Processing_GetAntennaPointing_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pointing.proto",
}
